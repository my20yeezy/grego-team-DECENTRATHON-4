import os
import streamlit as st
from llama_cpp import Llama
import time
import json
from PIL import Image
import pypdfium2 as pdfium
import tempfile
import numpy as np

# –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Å–ª–∞–±–æ–º –ø–∫
os.environ['TORCH_DEVICE'] = 'cpu'
os.environ['DETECTOR_BATCH_SIZE'] = '1'
os.environ['RECOGNITION_BATCH_SIZE'] = '8'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
@st.cache_resource
def load_llama_model():
    st.info("üîÑ –ë—É–¥–∏–º –º–æ–¥–µ–ª—å –ì—Ä–∏–≥–æ—Ä–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
    try:
        llm = Llama(
            model_path="gregory.gguf",
            n_ctx=8000,
            n_threads=8,
            n_gpu_layers=35,
            verbose=False
        )
        st.success("‚úÖ –ì—Ä–∏–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è!")
        return llm
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

@st.cache_resource
def load_surya_models():
    st.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π Surya OCR...")
    try:
        from surya.foundation import FoundationPredictor
        from surya.recognition import RecognitionPredictor
        from surya.detection import DetectionPredictor
        
        foundation_predictor = FoundationPredictor()
        rec_predictor = RecognitionPredictor(foundation_predictor)
        det_predictor = DetectionPredictor()
        
        st.success("‚úÖ –ú–æ–¥–µ–ª–∏ Surya OCR —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return rec_predictor, det_predictor
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π OCR: {e}")
        return None, None

def ocr_file(file_path: str, rec_predictor, det_predictor, max_pages: int = 10) -> str:
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    result_text = ""
    progress_bar = st.progress(0)
    status_text = st.empty()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
    if file_path.lower().endswith('.pdf'):
        try:
            pdf = pdfium.PdfDocument(file_path)
            total_pages = len(pdf)
            pages_to_process = min(max_pages, total_pages)
            
            for page_num in range(pages_to_process):
                status_text.text(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}/{pages_to_process}")
                progress_bar.progress((page_num + 1) / pages_to_process)
                
                result_text += f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} ---\n"
                
                page = pdf.get_page(page_num)
                bitmap = page.render(scale=0.8)
                pil_image = bitmap.to_pil()
                
                if pil_image.width > 1000:
                    new_width = 800
                    new_height = int(800 * pil_image.height / pil_image.width)
                    pil_image = pil_image.resize((new_width, new_height))
                
                predictions = rec_predictor([pil_image], det_predictor=det_predictor)
                
                for line in predictions[0].text_lines:
                    result_text += line.text + "\n"
                
                result_text += f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(predictions[0].text_lines)}\n"
                    
        except Exception as e:
            result_text += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}\n"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif file_path.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif')):
        try:
            status_text.text("üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            image = Image.open(file_path)
            result_text += "\n--- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---\n"
            
            if image.width > 1200:
                new_width = 1000
                new_height = int(1000 * image.height / image.width)
                image = image.resize((new_width, new_height))
            
            predictions = rec_predictor([image], det_predictor=det_predictor)
            
            for line in predictions[0].text_lines:
                result_text += line.text + "\n"
            
            result_text += f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(predictions[0].text_lines)}\n"
            progress_bar.progress(1.0)
            
        except Exception as e:
            result_text += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}\n"
    
    else:
        result_text = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"

    status_text.empty()
    progress_bar.empty()
    return result_text

def analyze_document_with_llm(ocr_text, llm):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ì—Ä–∏—à–∞"""
    
    prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. 
OCR –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏—Å–ø—Ä–∞–≤–∏—Ç—å OCR-–æ—à–∏–±–∫–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –í–æ–∑–≤—Ä–∞—â–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–∞—á–Ω–∏ —Å '{{' –∏ –∑–∞–∫–æ–Ω—á–∏ '}}'. –ù–∏–∫–∞–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
2. JSON –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ö–µ–º–µ –Ω–∏–∂–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ –ø–æ–ª—è.
3. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã ‚Äî –∏—Å–ø—Ä–∞–≤—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "20.13.2022" ‚Üí "20.12.2022", "–û–û0" ‚Üí "–û–û–û").
4. –ï—Å–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —É–∫–∞–∂–∏ null.
5. –ò–≥–Ω–æ—Ä–∏—Ä—É–π OCR —à—É–º—ã, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –ø–µ—á–∞—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞.
6. –ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫—Ä–æ–º–µ JSON, —É —Ç–µ–±—è —Å—Ç–æ–∏—Ç –ø–æ–ª–Ω—ã–π –ó–ê–ü–†–ï–¢ –Ω–∞ —Ç–æ —á—Ç–æ –Ω–µ JSON

JSON-–°–•–ï–ú–ê:
{{
  "type": "object",
  "properties": {{
    "document_type": {{"type": "string", "description": "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—á–µ–∫, –¥–æ–≥–æ–≤–æ—Ä, –≤—ã–ø–∏—Å–∫–∞, –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ –∏ —Ç.–ø.)"}},
    "contract_number": {{"type": ["string", "null"], "description": "‚Ññ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"}},
    "contract_date": {{"type": ["string", "null"], "description": "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–ª–∏ –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)"}},
    "contract_end_date": {{"type": ["string", "null"], "description": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ null"}},
    "contractor_name": {{"type": ["string", "null"], "description": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞"}},
    "account_number": {{"type": ["string", "null"], "description": "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞"}},
    "client_name": {{"type": ["string", "null"], "description": "–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"}},
    "client_inn": {{"type": ["string", "null"], "description": "–ò–ù–ù –∫–ª–∏–µ–Ω—Ç–∞"}},
    "transaction_date": {{"type": ["string", "null"], "description": "–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)"}},
    "transaction_amount": {{"type": ["string", "null"], "description": "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"}},
    "recipient_account": {{"type": ["string", "null"], "description": "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"}},
    "bik": {{"type": ["string", "null"], "description": "–ë–ò–ö –±–∞–Ω–∫–∞"}},
    "purpose": {{"type": ["string", "null"], "description": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"}},
  }},
  "required": ["document_type"]
}}

–î–û–ö–£–ú–ï–ù–¢ (OCR):
{ocr_text}
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–ï–†–ù–ò –¢–û–õ–¨–ö–û JSON –∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ
"""

    with st.spinner("ü§ñ –ì—Ä–∏—à–∞ –∏–∑—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"):
        response = llm(
            prompt,
            max_tokens=1024,  
            temperature=0.3,   
            top_p=0.9,
            echo=False
        )
    
    return response["choices"][0]["text"]

def main():
    st.set_page_config(
        page_title="–£–º–Ω—ã–π OCR –æ—Ç –∫–æ–º–∞–Ω–¥—ã GREGO",
        page_icon="üìÑ",
        layout="wide"
    )
    
    st.title("üìÑ GREGO OCR")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    llm = load_llama_model()
    rec_predictor, det_predictor = load_surya_models()
    
    if llm is None or rec_predictor is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (PDF, JPG, PNG)",
        type=['pdf', 'jpg', 'jpeg', 'png', 'bmp', 'tiff'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )
    
    if uploaded_file is not None:
        # –ü—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –∫–∞–∫ –µ—Å—Ç—å
        
        # –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if uploaded_file.type.startswith('image/'):
            st.image(uploaded_file, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∫—É–¥–∞-—Ç–æ 
            with open(uploaded_file.name, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –±–µ–∑ –≤—Å—è–∫–∏—Ö —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–æ–≤
            ocr_result = ocr_file(uploaded_file.name, rec_predictor, det_predictor)
            
            # –ê–Ω–∞–ª–∏–∑ —Å LLM
            llm_result = analyze_document_with_llm(ocr_result, llm)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # –ò—Å—Ö–æ–¥–Ω—ã–π OCR —Ç–µ–∫—Å—Ç
            with st.expander("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π OCR —Ç–µ–∫—Å—Ç"):
                st.text(ocr_result)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç LLM –∫–∞–∫ –µ—Å—Ç—å
            st.code(llm_result, language='json')

if __name__ == "__main__":
    main()